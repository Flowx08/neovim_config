
snippet main
	int main(int argc, const char *argv[])
	{
		${0}
		return 0;
	}
snippet mainn
	int main(void)
	{
		${0}
		return 0;
	}
snippet doc
	////////////////////////////////////////////////////////////
	/// \brief	${0}	
	///
	////////////////////////////////////////////////////////////
snippet docspace
	////////////////////////////////////////////////////////////
	///	${0}
	////////////////////////////////////////////////////////////
snippet docline
	////////////////////////////////////////////////////////////

snippet stalloc
	$1* ${1:Struct}Init();
	void $1Destroy($1* ${2});

snippet fset
	void ${1:SpaceName}Set${2:VarName}(${3});${0}

snippet fget
	${1:type} ${2:SpaceName}Get${3:VarName}();${0} 

snippet inc
	#include <${1:stdio}.h>
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif

snippet def
	#define

snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif

snippet #if
	#if ${1:FOO}
		${0}
	#endif

snippet guard
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${0}

	#endif /* end of include guard: $1 */

snippet guard++
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_HPP', 'UNTITLED_HPP'))`}
	#define $1

	${0}

	#endif /* end of include guard: $1 */

snippet if
	if (${1:/* condition */}) {
		${2}
	}

snippet el
	else {
		${1}
	}

snippet elif
	else if (${1:/* condition */}) {
		${2}
	}

snippet ifi
	if (${1:/* condition */}) ${2};

snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}

snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}

snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}

snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}

snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}

snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}

snippet wh
	while (${1:/* condition */}) {
		${2}
	}

snippet do
	do {
		${2}
	} while (${1:/* condition */});

snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
snippet fund
	${1:void} ${2:function_name}(${3});

snippet td
	typedef ${1:int} ${2:MyCustomType};

snippet st
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};

snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};

snippet pr
	printf("${1:%s}\n"${2});

snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});

snippet .
	[${1}]

snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, see <http://www.gnu.org/licenses/>.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */

	${0}
